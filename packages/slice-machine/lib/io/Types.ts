import path from "path";
import { generateTypes } from "prismic-ts-codegen";
import {
  retrieveManifest,
  retrieveJsonPackage,
} from "@slicemachine/core/build/node-utils/";

import {
  CustomTypes,
  CustomTypeSM,
} from "@slicemachine/core/build/models/CustomType/index";
import { Slices, SliceSM } from "@slicemachine/core/build/models/Slice";
import Files from "../utils/files";

const NON_EDITABLE_FILE_HEADER =
  "// Code generated by Slice Machine. DO NOT EDIT.";

const generateAndWriteTypes = (
  cwd: string,
  customTypeModels: CustomTypeSM[],
  sharedSliceModels: SliceSM[]
) => {
  const types = generateTypes({
    customTypeModels: customTypeModels.map((model) =>
      CustomTypes.fromSM(model)
    ),
    sharedSliceModels: sharedSliceModels.map((model) => Slices.fromSM(model)),
    clientIntegration: {
      includeCreateClientInterface: true,
      includeContentNamespace: true,
    },
  });

  const fileContents = `${NON_EDITABLE_FILE_HEADER}\n\n${types}`;

  Files.write(path.join(cwd, ".slicemachine", "prismicio.d.ts"), fileContents);
};

export const upsert = (
  cwd: string,
  customTypeModels: CustomTypeSM[],
  sharedSliceModels: SliceSM[]
) => {
  const manifest = retrieveManifest(cwd);

  const packageJson = retrieveJsonPackage(cwd);
  const allDependencies = {
    ...packageJson.content?.dependencies,
    ...packageJson.content?.devDependencies,
  };
  const hasTypesPackage = "@prismicio/types" in allDependencies;

  if (manifest.content && "generateTypes" in manifest.content) {
    // `generateTypes` is in manifest

    if (manifest.content.generateTypes) {
      if (hasTypesPackage) {
        generateAndWriteTypes(cwd, customTypeModels, sharedSliceModels);
      }
    } else {
      // Do nothing. User configured SM to not generate types.
    }
  } else {
    // `generateTypes` is not in manifest

    if (hasTypesPackage) {
      // Assume that we should generate types if `@prismicio/types` is installed.
      generateAndWriteTypes(cwd, customTypeModels, sharedSliceModels);
    }
  }
};
