import MockedBackendEnv from "../../__mocks__/backendEnvironment";
import { MockLibraryInfo } from "../../__mocks__/libraryState";
import onSaveSlice from "../../../server/src/api/common/hooks/onSaveSlice";
import { BackendEnvironment } from "@lib/models/common/Environment";
import { Models } from "@slicemachine/core";
import { vol } from "memfs";

jest.mock(`fs`, () => {
  const { vol } = jest.requireActual("memfs");
  return vol;
});

jest.mock(`@slicemachine/core`, () => {
  const actualCore = jest.requireActual("@slicemachine/core");
  return {
    ...actualCore,
    Libraries: {
      libraries: (cwd: string, libs: string[]) =>
        libs.map((lib) => MockLibraryInfo(lib)),
    },
  };
});

jest.mock("../../../server/src/api/common/LibrariesState", () => {
  return {
    generateState: jest.fn(),
  };
});

describe("onSaveSlice", () => {
  it("should generate index.js file", async () => {
    const env: BackendEnvironment = {
      ...MockedBackendEnv,
      framework: Models.Frameworks.next,
    };

    await onSaveSlice(env);

    const index = vol.readFileSync("/test/slice1/index.js", "utf8");
    expect(index).toEqual(
      "// This file is generated by Slice Machine. Update with care!\n" +
        "\n" +
        "import slice1 from 'slice1';\n" +
        "\n" +
        "export {\n" +
        "\tslice1,\n" +
        "};\n" +
        "\n" +
        "export const components = {\n" +
        "\tslice1: slice1,\n" +
        "};\n"
    );
  });

  it("should generate svelte index", async () => {
    const env: BackendEnvironment = {
      ...MockedBackendEnv,
      framework: Models.Frameworks.svelte,
    };

    await onSaveSlice(env);

    const index = vol.readFileSync("/test/slice1/index.js", "utf8");
    expect(index).toEqual(
      "// This file is generated by Slice Machine. Update with care!\n" +
        "\n" +
        "const Slices = {}\n" +
        "export default Slices\n" +
        "\n" +
        "import slice1 from './slice1/index.svelte'\n" +
        "Slices.slice1 = slice1\n"
    );
  });
});
