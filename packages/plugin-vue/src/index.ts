import type {
  Plugin,
  FilenameAndData,
  Variations,
} from "@slicemachine/plugin-middleware";
import { FieldType } from "@slicemachine/plugin-middleware";

export const framework: Plugin["framework"] = "vue";

export const syntax = "html";

export const slice = (name: string): FilenameAndData<string> => ({
  filename: "index.vue",
  data: `<template>
  <section class="section">
    <prismic-rich-text :field="slice.primary.title" class="title" />
    <prismic-rich-text :field="slice.primary.description" />
  </section>
</template>

<script>
export default {
  name: "${name}",
  props: {
    slice: {
      type: Object,
      required: true,
      default() {
        return {}
      },
    },
  },
}
</script>

<style scoped>
.section {
  position: relative;
  background: #f7f7f7;
  color: #111;
  padding: 4em;
  text-align: center;
}
a {
  color: #111;
}
.title {
  margin-bottom: 2em;
}
</style>
`,
});

export const story = (
  pathToComponent: string,
  sliceName: string,
  variations: Variations
): FilenameAndData<string> => {
  const filename = "index.stories.vue";
  const exportStatements = variations
    .map(
      (variation) => `export const ${variation.id} = () => ({
  components: {
    MyComponent,
    SliceZone
  },
  methods: {
    resolve() {
      return MyComponent
    }
  },
  data() {
    return {
      mock: ${JSON.stringify(variation)}
    }
  },
  template: '<SliceZone :slices="[mock]" :resolver="resolve" />'
})
${variation.id}.storyName = '${variation.name}'
`
    )
    .join("\n");

  return {
    filename,
    data: `import MyComponent from '${pathToComponent}';
import SliceZone from 'vue-slicezone'

export default {
  title: '${sliceName}'
}

${exportStatements}

`,
  };
};

export const snippets = ({
  type,
  fieldText,
  useKey = false,
  isRepeatable = false,
}: {
  type: FieldType;
  fieldText: string;
  useKey?: boolean;
  isRepeatable?: boolean;
}): string => {
  if (isRepeatable) {
    const code = snippets({ type, fieldText, useKey, isRepeatable: false });
    return `<div v-for="(item, i) in slice.items" :key="\`slice-item-\${i}\`">${code}</div>`;
  }
  switch (type) {
    case FieldType.Boolean:
      return `<span>{{ ${fieldText} ? 'true' : 'false' }}</span>`;

    case FieldType.Color:
      return `<span :style="\`color: \${${fieldText}}\`">Some Text</span>`;

    case FieldType.ContentRelationship:
      return `<prismic-link :field="${fieldText}">My Link</prismic-link>`;

    case FieldType.Date:
      return `<span>{{ ${fieldText} }}</span>`;

    case FieldType.Embed:
      return `<prismic-embed :field="${fieldText}" />`;

    case FieldType.GeoPoint:
      return `<span>{{ ${fieldText} }}</span>`;

    case FieldType.Group:
      return "";

    case FieldType.Image:
      return `<prismic-image :field="${fieldText}" />`;

    case FieldType.IntegrationFields:
      return "";

    case FieldType.Link:
      return `<prismic-link :field="${fieldText}">My Link</prismic-link>`;

    case FieldType.LinkToMedia:
      return `<prismic-link :field="${fieldText}">My Link</prismic-link>`;

    case FieldType.Number:
      return `<span>{{ ${fieldText} }}</span>`;

    case FieldType.Select:
      return `<span>{{ ${fieldText} }}</span>`;

    case FieldType.StructuredText:
      return `<prismic-rich-text :field="${fieldText}" />`;

    case FieldType.Text:
      return `<span>{{ ${fieldText} }}</span>`;

    case FieldType.Timestamp:
      return `<span>{{ ${fieldText} }}</span>`;

    case FieldType.UID:
      return `<span>{{ ${fieldText} }}</span>`;

    default:
      return "";
  }
};

export const index = (slices: string[]): FilenameAndData<string> => {
  const filename = "index.js";
  const exportStatements = slices.map(
    (slice) => `export { default as ${slice} } from './${slice}'`
  );

  const data = `// This file is generated by Slice Machine. Update with care!

${exportStatements.join("\n")}
`;
  return {
    filename,
    data,
  };
};
